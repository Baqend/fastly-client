image: gradle:jdk11

variables:
  CI: "true"
  GIT_STRATEGY: clone
  GIT_FETCH_EXTRA_FLAGS: --tags
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

stages:  # List of stages for jobs, and their order of execution
  - prerequisites
  - build
  - test
  - publish

before_script:
  - git checkout "$CI_COMMIT_REF_NAME"
  - export GRADLE_USER_HOME=`pwd`/.gradle

release-prerequisites-job: # runs the verifyRelease task from the axion-release plugin
  stage: prerequisites
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - ./gradlew verifyRelease

build:
  stage: build
  script: gradle --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

test:
  stage: test
  script: gradle check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle

# everytime we merge a branch into the main
release:
  environment: production
  stage: publish
  script:
    - git config user.name "Gitlab Ci/CD pipeline"
    - git config user.email no-reply@baqend.com
    - GIT_URL=`echo $CI_PROJECT_URL | sed -e "s|https://|https://oauth2:$PipelineReleasesPAT@|g"` # add authentication via token
    - ./gradlew changelogBump -Prelease=true
    - git add .
    - git commit -am "Bump release version"
    - ./gradlew createRelease --info --stacktrace
    - git push --tags $GIT_URL # push via https & Gitlab Project Authentication Token (PAT)
    - ./gradlew publish # publish latest version
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
